from scipy.integrate import solve_ivp
import numpy as np
import matplotlib.pyplot as plt


class Car:

    def __init__(self,
                 length=2.3,        # set car length = 2.3m as per requirement
                 velocity=5,        # set velocity to 5ms^-1
                 x_position=0.0,
                 y_position=0.3,
                 pose=np.deg2rad(5)):          # pose of 5 deg converted to rads
        self.__length = length
        self. __velocity = velocity
        self.__x_position = x_position
        self.__y_position = y_position
        self.__pose_initial = pose

    def move(self, steering_angle, dt):         # where dt denotes time interval

        # STEP 1: Define the system dynamics
        def system_dynamics(_t,z):
            # Define the system dynamics given in eqns. 2.1a-c
            theta = z[2]    # theta is third part of the function (x,y,theta)
            return [self.__velocity * np.cos(theta),
                    self.__velocity * np.sin(theta),
                    self.__velocity * np.tan(steering_angle) / self.__length]

        # STEP 2: Define the initial conditions, z(0)
        z_initial = [self.__x_position,
                     self.__y_position,
                     self.__pose_initial]

        # STEP 3: Call solve_ivp ~ solves equations
        __num_points = 1000     # Resolution of the solution
        solution = solve_ivp(system_dynamics,
                             [0, dt],
                             z_initial,
                             t_eval=np.linspace(0, dt, __num_points))

        self.__x_position = solution.y[0][-1]   # [-1] represents last element in the array
        self.__y_position = solution.y[1][-1]
        self.__pose_initial = solution.y[2][-1]

        # STEP 4: Plot x-y trajectory of the car

        # plot y vs x
        plt.plot(solution.y[0], solution.y[1])
        plt.grid()
        plt.xlabel('x (m)')
        plt.ylabel('y (m)')
        plt.show()


# Declare car with steering angle 2 deg for time 2s
ronald = Car()
ronald.move(np.deg2rad(2), 2)   # 2 deg converted to rads
